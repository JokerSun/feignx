package feign.assertions;

import feign.http.HttpHeader;
import feign.http.HttpRequest;
import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.api.Assertions;
import org.assertj.core.util.Objects;

/**
 * Abstract base class for {@link HttpRequest} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public abstract class AbstractHttpRequestAssert<S extends AbstractHttpRequestAssert<S, A>, A extends HttpRequest> extends AbstractObjectAssert<S, A> {

  /**
   * Creates a new <code>{@link AbstractHttpRequestAssert}</code> to make assertions on actual HttpRequest.
   * @param actual the HttpRequest we want to make assertions on.
   */
  protected AbstractHttpRequestAssert(A actual, Class<S> selfType) {
    super(actual, selfType);
  }

  /**
   * Verifies that the actual HttpRequest's content contains the given byte elements.
   * @param content the given elements that should be contained in actual HttpRequest's content.
   * @return this assertion object.
   * @throws AssertionError if the actual HttpRequest's content does not contain all given byte elements.
   */
  public S hasContent(byte... content) {
    // check that actual HttpRequest we want to make assertions on is not null.
    isNotNull();

    // check that given byte varargs is not null.
    if (content == null) failWithMessage("Expecting content parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Assertions.assertThat(org.assertj.core.util.introspection.FieldSupport.EXTRACTION.fieldValue("content", byte[].class, actual)).contains(content);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual HttpRequest's content contains <b>only</b> the given byte elements and nothing else in whatever order.
   *
   * @param content the given elements that should be contained in actual HttpRequest's content.
   * @return this assertion object.
   * @throws AssertionError if the actual HttpRequest's content does not contain all given byte elements and nothing else.
   */
  public S hasOnlyContent(byte... content) {
    // check that actual HttpRequest we want to make assertions on is not null.
    isNotNull();

    // check that given byte varargs is not null.
    if (content == null) failWithMessage("Expecting content parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Assertions.assertThat(org.assertj.core.util.introspection.FieldSupport.EXTRACTION.fieldValue("content", byte[].class, actual)).containsOnly(content);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual HttpRequest's content does not contain the given byte elements.
   *
   * @param content the given elements that should not be in actual HttpRequest's content.
   * @return this assertion object.
   * @throws AssertionError if the actual HttpRequest's content contains any given byte elements.
   */
  public S doesNotHaveContent(byte... content) {
    // check that actual HttpRequest we want to make assertions on is not null.
    isNotNull();

    // check that given byte varargs is not null.
    if (content == null) failWithMessage("Expecting content parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Assertions.assertThat(org.assertj.core.util.introspection.FieldSupport.EXTRACTION.fieldValue("content", byte[].class, actual)).doesNotContain(content);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual HttpRequest has no content.
   * @return this assertion object.
   * @throws AssertionError if the actual HttpRequest's content is not empty.
   */
  public S hasNoContent() {
    // check that actual HttpRequest we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have content but had :\n  <%s>";

    // check that it is not empty
    if (org.assertj.core.util.introspection.FieldSupport.EXTRACTION.fieldValue("content", byte[].class, actual).length > 0)  {
      failWithMessage(assertjErrorMessage, actual, java.util.Arrays.toString(org.assertj.core.util.introspection.FieldSupport.EXTRACTION.fieldValue("content", byte[].class, actual)));
    }

    // return the current assertion for method chaining
    return myself;
  }


  /**
   * Verifies that the actual HttpRequest's headers contains the given HttpHeader elements.
   * @param headers the given elements that should be contained in actual HttpRequest's headers.
   * @return this assertion object.
   * @throws AssertionError if the actual HttpRequest's headers does not contain all given HttpHeader elements.
   */
  public S hasHeaders(HttpHeader... headers) {
    // check that actual HttpRequest we want to make assertions on is not null.
    isNotNull();

    // check that given HttpHeader varargs is not null.
    if (headers == null) failWithMessage("Expecting headers parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Assertions.assertThat(org.assertj.core.util.introspection.FieldSupport.EXTRACTION.fieldValue("headers", feign.http.HttpHeader[].class, actual)).contains(headers);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual HttpRequest's headers contains <b>only</b> the given HttpHeader elements and nothing else in whatever order.
   *
   * @param headers the given elements that should be contained in actual HttpRequest's headers.
   * @return this assertion object.
   * @throws AssertionError if the actual HttpRequest's headers does not contain all given HttpHeader elements and nothing else.
   */
  public S hasOnlyHeaders(HttpHeader... headers) {
    // check that actual HttpRequest we want to make assertions on is not null.
    isNotNull();

    // check that given HttpHeader varargs is not null.
    if (headers == null) failWithMessage("Expecting headers parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Assertions.assertThat(org.assertj.core.util.introspection.FieldSupport.EXTRACTION.fieldValue("headers", feign.http.HttpHeader[].class, actual)).containsOnly(headers);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual HttpRequest's headers does not contain the given HttpHeader elements.
   *
   * @param headers the given elements that should not be in actual HttpRequest's headers.
   * @return this assertion object.
   * @throws AssertionError if the actual HttpRequest's headers contains any given HttpHeader elements.
   */
  public S doesNotHaveHeaders(HttpHeader... headers) {
    // check that actual HttpRequest we want to make assertions on is not null.
    isNotNull();

    // check that given HttpHeader varargs is not null.
    if (headers == null) failWithMessage("Expecting headers parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Assertions.assertThat(org.assertj.core.util.introspection.FieldSupport.EXTRACTION.fieldValue("headers", feign.http.HttpHeader[].class, actual)).doesNotContain(headers);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual HttpRequest has no headers.
   * @return this assertion object.
   * @throws AssertionError if the actual HttpRequest's headers is not empty.
   */
  public S hasNoHeaders() {
    // check that actual HttpRequest we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have headers but had :\n  <%s>";

    // check that it is not empty
    if (org.assertj.core.util.introspection.FieldSupport.EXTRACTION.fieldValue("headers", feign.http.HttpHeader[].class, actual).length > 0)  {
      failWithMessage(assertjErrorMessage, actual, java.util.Arrays.toString(org.assertj.core.util.introspection.FieldSupport.EXTRACTION.fieldValue("headers", feign.http.HttpHeader[].class, actual)));
    }

    // return the current assertion for method chaining
    return myself;
  }


  /**
   * Verifies that the actual HttpRequest's method is equal to the given one.
   * @param method the given method to compare the actual HttpRequest's method to.
   * @return this assertion object.
   * @throws AssertionError - if the actual HttpRequest's method is not equal to the given one.
   */
  public S hasMethod(feign.http.HttpMethod method) {
    // check that actual HttpRequest we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting method of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    feign.http.HttpMethod actualMethod = org.assertj.core.util.introspection.FieldSupport.EXTRACTION.fieldValue("method", feign.http.HttpMethod.class, actual);
    if (!Objects.areEqual(actualMethod, method)) {
      failWithMessage(assertjErrorMessage, actual, method, actualMethod);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual HttpRequest's options is equal to the given one.
   * @param options the given options to compare the actual HttpRequest's options to.
   * @return this assertion object.
   * @throws AssertionError - if the actual HttpRequest's options is not equal to the given one.
   */
  public S hasOptions(feign.RequestOptions options) {
    // check that actual HttpRequest we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting options of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    feign.RequestOptions actualOptions = org.assertj.core.util.introspection.FieldSupport.EXTRACTION.fieldValue("options", feign.RequestOptions.class, actual);
    if (!Objects.areEqual(actualOptions, options)) {
      failWithMessage(assertjErrorMessage, actual, options, actualOptions);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual HttpRequest's uri is equal to the given one.
   * @param uri the given uri to compare the actual HttpRequest's uri to.
   * @return this assertion object.
   * @throws AssertionError - if the actual HttpRequest's uri is not equal to the given one.
   */
  public S hasUri(java.net.URI uri) {
    // check that actual HttpRequest we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting uri of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    java.net.URI actualUri = org.assertj.core.util.introspection.FieldSupport.EXTRACTION.fieldValue("uri", java.net.URI.class, actual);
    if (!Objects.areEqual(actualUri, uri)) {
      failWithMessage(assertjErrorMessage, actual, uri, actualUri);
    }

    // return the current assertion for method chaining
    return myself;
  }

}
